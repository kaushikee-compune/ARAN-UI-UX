// D:\ARAN Care\ARAN UI\aran-ux\lib\pdf\generateImmunizationPdf.ts
import jsPDF from "jspdf";
import "jspdf-autotable";

/** ---------- Interfaces ---------- */
interface ImmunizationRecord {
  vaccine: string;
  doseNumber?: string;
  dateGiven?: string;
  dueDate?: string;
  comments?: string;
}

interface Patient {
  name: string;
  age?: string;
  gender?: string;
  abhaNumber?: string;
  abhaAddress?: string;
}

interface Doctor {
  name: string;
  regNo?: string;
  specialty?: string;
}

interface Clinic {
  name: string;
  address?: string;
  phone?: string;
  logoUrl?: string;
}

interface ImmunizationPdfInput {
  immunization: ImmunizationRecord[];
  patient: Patient;
  doctor: Doctor;
  clinic: Clinic;
}

/** ---------- Main Generator ---------- */
export async function generateImmunizationPdf({
  immunization,
  patient,
  doctor,
  clinic,
}: ImmunizationPdfInput) {
  const doc = new jsPDF();

  /* ----- Header Section ----- */
  doc.setFont("helvetica", "bold");
  doc.setFontSize(16);
  doc.text(clinic.name || "Clinic Name", 14, 18);

  if (clinic.address) {
    doc.setFont("helvetica", "normal");
    doc.setFontSize(10);
    doc.text(clinic.address, 14, 24);
  }
  if (clinic.phone) {
    doc.text(`Ph: ${clinic.phone}`, 14, 29);
  }

  // Optional logo (public path)
  try {
    if (clinic.logoUrl) {
      const logo = await loadImageAsBase64(clinic.logoUrl);
      if (logo) doc.addImage(logo, "PNG", 160, 10, 30, 30);
    }
  } catch {
    /* ignore logo error */
  }

  /* ----- Title & Patient Info ----- */
  doc.setFont("helvetica", "bold");
  doc.setFontSize(12);
  doc.text("Immunization Record", 105, 45, { align: "center" });
  doc.line(14, 47, 196, 47);

  doc.setFont("helvetica", "normal");
  doc.setFontSize(11);
  let y = 55;
  doc.text(`Doctor: ${doctor.name || "-"}`, 14, y);
  y += 6;
  if (doctor.specialty) doc.text(`Specialty: ${doctor.specialty}`, 14, y), (y += 6);
  if (doctor.regNo) doc.text(`Reg No: ${doctor.regNo}`, 14, y), (y += 6);
  y += 2;
  doc.text(`Patient: ${patient.name}`, 14, y);
  y += 6;
  if (patient.gender || patient.age)
    doc.text(`${patient.gender || ""} ${patient.age ? "• " + patient.age : ""}`, 14, y), (y += 6);
  if (patient.abhaNumber)
    doc.text(`ABHA No: ${patient.abhaNumber}`, 14, y), (y += 6);
  if (patient.abhaAddress)
    doc.text(`ABHA Address: ${patient.abhaAddress}`, 14, y), (y += 6);

  /* ----- Immunization Table ----- */
  const rows =
    immunization?.map((v: ImmunizationRecord) => [
      v.vaccine,
      v.doseNumber || "",
      v.dateGiven || "",
      v.dueDate || "",
      v.comments || "",
    ]) || [];

  (doc as any).autoTable({
    head: [["Vaccine", "Dose #", "Date Given", "Due Date", "Comments"]],
    body: rows.length ? rows : [["—", "—", "—", "—", "—"]],
    startY: y + 8,
    theme: "grid",
    headStyles: { fillColor: [2, 195, 154], textColor: 255, fontStyle: "bold" },
    styles: { fontSize: 10, cellPadding: 2 },
    columnStyles: { 0: { cellWidth: 45 }, 1: { cellWidth: 25 } },
  });

  /* ----- Footer ----- */
  const pageHeight = doc.internal.pageSize.height;
  doc.setFontSize(10);
  doc.text("Doctor's Signature", 150, pageHeight - 20);
  doc.line(145, pageHeight - 22, 196, pageHeight - 22);

  doc.setFontSize(9);
  doc.setTextColor(100);
  doc.text(
    "Generated by ARAN HMIS — Immunization Record",
    14,
    pageHeight - 10
  );

  /* ----- Save PDF ----- */
  doc.save(`${patient.name?.replace(/\s+/g, "_") || "Immunization"}.pdf`);
}

/** ---------- Helper to load logo from /public ---------- */
async function loadImageAsBase64(path: string): Promise<string | null> {
  try {
    const res = await fetch(path);
    const blob = await res.blob();
    return await new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () =>
        resolve(reader.result ? (reader.result as string) : null);
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  } catch {
    return null;
  }
}
